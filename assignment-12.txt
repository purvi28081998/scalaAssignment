1. Partially Applied Functions
A partially applied function is a function that you do not supply all of the arguments for right away. Instead, you create a new function by supplying a subset of the arguments.
Example:
scala

def add(a: Int, b: Int, c: Int): Int = a + b + c

// Partially applied function
val addTwo = add(2, _: Int, _: Int)

println(addTwo(3, 4)) // Output: 9
In the example above, addTwo is a partially applied function where the first argument (a) is fixed as 2, and the remaining two arguments are left as placeholders.
2. Partial Functions
A partial function is a function that is not defined for all possible inputs. It is defined only for a subset of input values. Partial functions are often used in pattern matching.
Example:
scala

val divide: PartialFunction[Int, Int] = {
  case x if x != 0 => 42 / x
}

if (divide.isDefinedAt(2)) {
  println(divide(2)) // Output: 21
}

if (divide.isDefinedAt(0)) {
  println(divide(0)) // Will not be executed
} else {
  println("Not defined for 0") // Output: Not defined for 0
}
3. Implicit Conversions / Implicit Types
Implicit conversions allow you to automatically convert one type to another. Implicit parameters and conversions can provide default values and convert types in a way that makes your code more concise and flexible.
Example of Implicit Conversion:
scala

implicit def intToString(x: Int): String = x.toString

val myString: String = 123 // Implicitly converted from Int to String
println(myString) // Output: 123
Example of Implicit Parameters:
scala

def greet(name: String)(implicit greeting: String): Unit = {
  println(s"$greeting, $name")
}

implicit val defaultGreeting: String = "Hello"

greet("Alice") // Output: Hello, Alice
4. Underscore Syntax in Collection Operations
The underscore (_) is a shorthand used in various contexts in Scala, especially in collection operations, to represent anonymous functions, placeholders, and more.
Examples:
	 	Anonymous Functions:  
	 	val numbers = List(1, 2, 3, 4, 5)
	 	val doubled = numbers.map(_ * 2)
	 	println(doubled) // Output: List(2, 4, 6, 8, 10)
	 	  
	 	Placeholders for Parameters: scala   def add(a: Int, b: Int): Int = a + b

	 	val addTwo = add(2, _: Int)
	 	println(addTwo(3)) // Output: 5
	 	  
		Reducing Collections: scala   val sum = numbers.reduce(_ + _)
		println(sum) // Output: 15
		  
		Partially Applied Functions: scala   val addTo = (a: Int, b: Int) => a + b

		val addToFive = addTo(5, _)
		println(addToFive(3)) // Output: 8
		  
		Extracting Fields in Tuples: scala   val pairs = List((1, 2), (3, 4), (5, 6))

		val firstElements = pairs.map(_._1)
		println(firstElements) // Output: List(1, 3, 5)
		  

