{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red174\green176\blue183;\red23\green23\blue26;\red195\green123\blue90;
\red38\green157\blue169;\red103\green107\blue114;\red89\green158\blue96;}
{\*\expandedcolortbl;;\csgenericrgb\c68235\c69020\c71765;\csgenericrgb\c9020\c9020\c10196;\csgenericrgb\c76471\c48235\c35294;
\csgenericrgb\c14902\c61569\c66275;\csgenericrgb\c40392\c41961\c44706;\csgenericrgb\c34902\c61961\c37647;}
\paperw11900\paperh16840\margl1440\margr1440\vieww34360\viewh21600\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 1. Partially Applied Functions\
A partially applied function is a function that you \cf4 do \cf2 not supply all of the arguments \cf4 for \cf2 right away. Instead, you create a \cf4 new \cf2 function by supplying a subset of the arguments.\
Example:\
scala\
\
def add(a: Int, b: Int, c: Int): Int = a + b + c\
\
// Partially applied function\
val addTwo = add(\cf5 2\cf2 , _: Int, _: Int)\
\
println(addTwo(3, 4)) \cf6 // Output: 9\
\cf2 In the example above, addTwo is a partially applied function where the first argument (a) is fixed as \cf5 2\cf2 , and the remaining two arguments are left as placeholders.\
2. Partial Functions\
A partial function is a function that is not defined \cf4 for \cf2 all possible inputs. It is defined only \cf4 for \cf2 a subset of input values. Partial functions are often used in pattern matching.\
Example:\
scala\
\
val divide: PartialFunction[Int, Int] = \{\
  case x \cf4 if \cf2 x != \cf5 0 \cf2 => \cf5 42 \cf2 / x\
\}\
\
if (divide.isDefinedAt(2)) \{\
  println(divide(2)) \cf6 // Output: 21\
\cf2 \}\
\
if (divide.isDefinedAt(0)) \{\
  println(divide(0)) \cf6 // Will not be executed\
\cf2 \} else \{\
  println("Not defined \cf4 for \cf5 0\cf7 ") // Output: Not defined for 0\
\cf2 \}\
3. Implicit Conversions / Implicit Types\
Implicit conversions allow you to automatically convert one \cf4 type \cf2 to another. Implicit parameters and conversions can provide default values and convert types in a way that makes your code more concise and flexible.\
Example of Implicit Conversion:\
scala\
\
implicit def intToString(x: Int): String = x.toString\
\
val myString: String = \cf5 123 \cf6 // Implicitly converted from Int to String\
\cf2 println(myString) \cf6 // \cf2 Output: \cf5 123\
\cf2 Example of Implicit Parameters:\
scala\
\
def greet(name: String)(\cf4 implicit \cf2 greeting: String): Unit = \{\
  println(s"$greeting, \cf7 $name")\
\cf2 \}\
\
implicit val defaultGreeting: String = \cf7 "Hello"\
\
\cf2 greet("Alice") \cf6 // \cf2 Output: Hello, Alice\
4. Underscore Syntax in Collection Operations\
The underscore (_) is a shorthand used in various contexts in Scala, especially in collection operations, to represent anonymous functions, placeholders, and more.\
Examples:\
	 	Anonymous Functions:\uc0\u8232 \u8232 \
	 	val numbers = List(\cf5 1\cf2 , \cf5 2\cf2 , \cf5 3\cf2 , \cf5 4\cf2 , \cf5 5\cf2 )\
	 	val doubled = numbers.map(_ * \cf5 2\cf2 )\
	 	println(doubled) \cf6 // Output: List(2, 4, 6, 8, 10)\
	 	\cf2 \uc0\u8232 \u8232 \
	 	Placeholders \cf4 for \cf2 Parameters:\uc0\u8232 scala \u8232 \u8232 \cf4 def \cf2 add(a: Int, b: Int): Int = a + b\
\
	 	val addTwo = add(\cf5 2\cf2 , _: Int)\
	 	println(addTwo(3)) \cf6 // Output: 5\
	 	\cf2 \uc0\u8232 \u8232 \
		Reducing Collections:\uc0\u8232 scala \u8232 \u8232 \cf4 val \cf2 sum = numbers.reduce(_ + _)\
		println(sum) \cf6 // Output: 15\
		\cf2 \uc0\u8232 \u8232 \
		Partially Applied Functions:\uc0\u8232 scala \u8232 \u8232 \cf4 val \cf2 addTo = (a: Int, b: Int) => a + b\
\
		val addToFive = addTo(\cf5 5\cf2 , _)\
		println(addToFive(3)) \cf6 // Output: 8\
		\cf2 \uc0\u8232 \u8232 \
		Extracting Fields in Tuples:\uc0\u8232 scala \u8232 \u8232 \cf4 val \cf2 pairs = List((\cf5 1\cf2 , \cf5 2\cf2 ), (\cf5 3\cf2 , \cf5 4\cf2 ), (\cf5 5\cf2 , \cf5 6\cf2 ))\
\
		val firstElements = pairs.map(_._1)\
		println(firstElements) \cf6 // Output: List(1, 3, 5)\
		\cf2 \uc0\u8232 \u8232 \
\
}